[unix_http_server]
file=/tmp/supervisor.sock   ; the path to the socket file
;chmod=0700                 ; socket file mode (default 0700)
;chown=nobody:nogroup       ; socket file uid:gid owner
;username=user              ; default is no username (open server)
;password=123               ; default is no password (open server)

[inet_http_server]         ; Web Server的部分
port=127.0.0.1:9001        ;
username=user              ; 登录用户名
password=123               ; 登录密码

[supervisord]               ; 全局配置部分
logfile=supervisord.log ; 主log文件
logfile_maxbytes=50MB        ; rotation配置
logfile_backups=10           ; 备份数量
loglevel=info                ; 日志级别，默认 info; 其他选项: debug,warn,trace
pidfile=/tmp/supervisord.pid ; pid文件
nodaemon=false               ; 默认是后台运行，如果需要前台运行可以设置为true
;user=chrism                 ; 默认是当前用户，如果是root用户的话需要配置为root
;directory=/tmp              ; 配置所有涉及到目录的根目录，默认是当前运行目录
;environment=KEY="value"     ; 全局（所有program）环境变量配置

[rpcinterface:supervisor]    ; 必须启用，supervisorctl通过它来管理进程
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]             ; 前几项配置必须跟[unix_http_server]保持相同
serverurl=unix:///tmp/supervisor.sock
;username=chris
;password=123
;prompt=mysupervisor         ; 进入交互模式时的提示文字，默认是"supervisor"
;history_file=~/.sc_history  ; 用户的历史记录，跟bash上的配置类似，开启后可以查看和使用历史命令

[program:typeidea]           ;程序配置的部分，一份supervisord.conf可以配置多个程序
command=gunicorn typeidea.wsgi:application -w 4 -b 127.0.0.1:800%(process_num)1d  ; 启动命令，需要注意路径，最后的%(process_num)1d是获取当前进程号
process_name=%(program_name)s_%(process_num)s ; 进程名，当下面的numprocs大于1时，必须配置%(process_num)s
numprocs=2                    ; 要启动进程数
directory=typeidea             ; 同上面配置，启动是所处的目录
priority=999                  ; 程序权重，多个程序时不同权重的程序启动先后顺序不同
autostart=true                ; supervisord启动是是否自动启动
environment=TYPEIDEA_PROFILE="develop"  ; 环境变量配置
;startsecs=1                   ; 进程启动多长时间后视为正常运行
;startretries=3                ; 启动失败时重试次数，默认3
;autorestart=unexpected        ; 何时重启进程如果程序在正常运行后退出，默认是unexpected也就是异常（不属于下面配置的exitcode时）
;exitcodes=0,2                 ; 正常退出的exitcode
;stopsignal=QUIT               ; kill进程的信号，默认是TERM，这是Linux中断信号：有如下选项
                               ; TERM, HUP, INT, QUIT, KILL, USR1, or USR2
;stopwaitsecs=10               ; 当执行shutdown后多久关闭进程
;stopasgroup=false             ; 停止进程组，比如Flask的Debug模式下，它不会传播信号给子进程，这会导致出现孤儿进程。
;killasgroup=false             ; 同上，如果运行程序使用了multiprocessing的话需要用到
;user=chrism                   ; 使用其他用户身份运行程序
;redirect_stderr=true          ; 重定向错误到stdout中，默认关闭
stdout_logfile=stdout.log        ;同 [supervisord]
;stdout_logfile_maxbytes=1MB   ;
;stdout_logfile_backups=10     ;

